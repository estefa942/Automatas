/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista;

import com.itextpdf.text.Document;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import controlador.Archivo;
import controlador.ControladorAutomata;
import controlador.DobleAutomata;
import java.io.BufferedWriter;
//import controlador.ControladorEntradaDatos;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.Vector;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import modelo.AutomataF;

/**
 * @author Estefany Muriel Cano
 * @author Alejandro Castaño Rojas
 */
public class PantallaIngreso extends javax.swing.JFrame {

    JFileChooser abrirArchivo = new JFileChooser();
    File archivo;
    ControladorAutomata ca1;
    ControladorAutomata ca2;
    ControladorAutomata caDoble;
    
    AutomataF automata1 = new AutomataF();
    AutomataF automata2 = new AutomataF();
    Vector vEstados = new Vector();
    private String[] estadosAceptacion;
    DefaultTableModel dtm;
    DefaultTableModel dtm2;

    int seleccion = 1;
    boolean auto2 = false;

    /**
     * Creates new form PantallaIngreso
     */
    public PantallaIngreso() {
        initComponents();
        setTitle("Autómatas Finitos");
        setLocationRelativeTo(null);
        btnConversor.setVisible(false);
        btnVerificarHilera.setVisible(false);
        btnSimplificar.setVisible(false);
        btnOperar.setEnabled(false);
        txtNuevoEstado.setEnabled(false);
        btnRestaurar.setEnabled(false);
        btnAddEstado.setEnabled(false);
        btnGuardarArchivo.setEnabled(false);
        btnUnion2Automatas.setEnabled(false);
        btnUnion2Automatas.setVisible(false);
        btnInterseccion.setEnabled(false);
        btnInterseccion.setVisible(false);
        btnPDF.setEnabled(false);

        btnEvaluar.setEnabled(false);
        textVeri.setEnabled(false);
        secuenciaIngresada.setEnabled(false);
        mostrarDecision.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupoAutomatas = new javax.swing.ButtonGroup();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaEstados = new javax.swing.JTable();
        txtSimbolos = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtEstados = new javax.swing.JTextField();
        btnIngreso = new javax.swing.JButton();
        btnConversor = new javax.swing.JButton();
        btnOperar = new javax.swing.JButton();
        btnArchivo = new javax.swing.JButton();
        scroll2 = new javax.swing.JScrollPane();
        tablaNuevoAutomata = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        btnVerificarHilera = new javax.swing.JButton();
        btnSimplificar = new javax.swing.JButton();
        txtNuevoEstado = new javax.swing.JTextField();
        btnAddEstado = new javax.swing.JButton();
        btnRestaurar = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        textVeri = new javax.swing.JLabel();
        secuenciaIngresada = new javax.swing.JTextField();
        btnEvaluar = new javax.swing.JButton();
        mostrarDecision = new javax.swing.JTextField();
        btnGuardarArchivo = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        rdbtnA1 = new javax.swing.JRadioButton();
        rdbtnA2 = new javax.swing.JRadioButton();
        btnUnion2Automatas = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        btnInterseccion = new javax.swing.JButton();
        btnPDF = new javax.swing.JButton();
        Fondo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1244, 510));
        setPreferredSize(new java.awt.Dimension(1240, 545));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Ingrese los símbolos de entrada:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, -1, -1));

        tablaEstados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(tablaEstados);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 50, 370, 310));

        txtSimbolos.setToolTipText("");
        getContentPane().add(txtSimbolos, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 60, 240, -1));

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Ingrese un nuevo estado:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 210, 180, -1));

        txtEstados.setToolTipText("");
        getContentPane().add(txtEstados, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 130, 240, -1));

        btnIngreso.setText("Ingresar");
        btnIngreso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIngresoActionPerformed(evt);
            }
        });
        getContentPane().add(btnIngreso, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 170, 110, -1));

        btnConversor.setText("AFND a AF");
        btnConversor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConversorActionPerformed(evt);
            }
        });
        getContentPane().add(btnConversor, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 380, 240, -1));

        btnOperar.setText("Operar");
        btnOperar.setActionCommand("Operar ");
        btnOperar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOperarActionPerformed(evt);
            }
        });
        getContentPane().add(btnOperar, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 390, 370, -1));

        btnArchivo.setText("Abrir archivo");
        btnArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnArchivoActionPerformed(evt);
            }
        });
        getContentPane().add(btnArchivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 320, 240, -1));

        tablaNuevoAutomata.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        scroll2.setViewportView(tablaNuevoAutomata);

        getContentPane().add(scroll2, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 50, 370, 310));
        getContentPane().add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 312, 240, 10));

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        getContentPane().add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 30, 20, 460));

        btnVerificarHilera.setText("Verificar hilera");
        btnVerificarHilera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerificarHileraActionPerformed(evt);
            }
        });
        getContentPane().add(btnVerificarHilera, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 470, 240, -1));

        btnSimplificar.setText("Simplificar autómata");
        btnSimplificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSimplificarActionPerformed(evt);
            }
        });
        getContentPane().add(btnSimplificar, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 350, 240, -1));
        getContentPane().add(txtNuevoEstado, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 230, 240, -1));

        btnAddEstado.setText("Agregar estado");
        btnAddEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddEstadoActionPerformed(evt);
            }
        });
        getContentPane().add(btnAddEstado, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 270, 240, -1));

        btnRestaurar.setText("Restaurar");
        btnRestaurar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRestaurarActionPerformed(evt);
            }
        });
        getContentPane().add(btnRestaurar, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 170, 120, -1));

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Ingrese los estados:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 100, -1, -1));
        getContentPane().add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 380, 860, 10));

        textVeri.setForeground(new java.awt.Color(255, 255, 255));
        textVeri.setText("Ingrese la secuencia a verificar.");
        getContentPane().add(textVeri, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 390, 330, -1));
        getContentPane().add(secuenciaIngresada, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 410, 330, -1));

        btnEvaluar.setText("Evaluar");
        btnEvaluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEvaluarActionPerformed(evt);
            }
        });
        getContentPane().add(btnEvaluar, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 440, 330, 30));

        mostrarDecision.setEditable(false);
        getContentPane().add(mostrarDecision, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 480, 330, -1));

        btnGuardarArchivo.setText("Guardar en Archivo de Texto");
        btnGuardarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarArchivoActionPerformed(evt);
            }
        });
        getContentPane().add(btnGuardarArchivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 430, 370, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/rsz_minhelp.png"))); // NOI18N
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 90, 30, 30));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/rsz_minhelp.png"))); // NOI18N
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel5MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 20, 30, 30));

        grupoAutomatas.add(rdbtnA1);
        rdbtnA1.setForeground(new java.awt.Color(255, 255, 255));
        rdbtnA1.setSelected(true);
        rdbtnA1.setText("Autómata 1");
        rdbtnA1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbtnA1ActionPerformed(evt);
            }
        });
        getContentPane().add(rdbtnA1, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 20, -1, -1));

        grupoAutomatas.add(rdbtnA2);
        rdbtnA2.setForeground(new java.awt.Color(255, 255, 255));
        rdbtnA2.setText("Autómata 2");
        rdbtnA2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbtnA2ActionPerformed(evt);
            }
        });
        getContentPane().add(rdbtnA2, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 20, -1, -1));

        btnUnion2Automatas.setText("Unir 2 autómatas");
        btnUnion2Automatas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUnion2AutomatasActionPerformed(evt);
            }
        });
        getContentPane().add(btnUnion2Automatas, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 410, 240, -1));

        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Seleccione el autómata con el que desea trabajar:");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 0, 380, 20));

        btnInterseccion.setText("Interseccion de 2 autómatas");
        btnInterseccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInterseccionActionPerformed(evt);
            }
        });
        getContentPane().add(btnInterseccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 440, 240, -1));

        btnPDF.setText("Guardar en PDF");
        btnPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPDFActionPerformed(evt);
            }
        });
        getContentPane().add(btnPDF, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 470, 370, 30));

        Fondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/fondo1.jpg"))); // NOI18N
        getContentPane().add(Fondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -20, 1240, 600));

        pack();
    }// </editor-fold>//GEN-END:initComponents
/**
     * Este botón permite crear la tabla para el autómata de acuerdo a los
     * simbolos y estdos que el usurio ingrese, además activa y desactiva
     * algunas funciones.
     *
     * @param evt
     */
    private void btnIngresoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIngresoActionPerformed
        // TODO add your handling code here:
        String[] simbolosEntrando = txtSimbolos.getText().split(",");
        String[] simbolosArr = new String[simbolosEntrando.length + 3];
        simbolosArr[0] = "Estados";
        for (int sym = 1; sym < simbolosArr.length - 2; sym++) {
            simbolosArr[sym] = simbolosEntrando[sym - 1];
        }
        simbolosArr[simbolosArr.length - 2] = "E.A.";
        simbolosArr[simbolosArr.length - 1] = "E.I.";
        String[] estados = txtEstados.getText().split(",");

        dtm = new DefaultTableModel(simbolosArr, 0);
        for (int i = 0; i < estados.length; i++) {
            String[] st = new String[1];
            st[0] = estados[i];
            dtm.addRow(st);
            vEstados.add(estados[i]);
        }
        if (seleccion == 1) {
            automata1.setEstados(estados);
            automata1.setSimbolos(simbolosEntrando);
        } else if (seleccion == 2) {
            automata2.setEstados(estados);
            automata2.setSimbolos(simbolosEntrando);
        }
        tablaSeleccionada().setModel(dtm);
        btnOperar.setEnabled(true);
        btnAddEstado.setEnabled(true);
        btnRestaurar.setEnabled(true);
        txtNuevoEstado.setEnabled(true);

        btnIngreso.setEnabled(false);
        txtEstados.setEnabled(false);
        txtSimbolos.setEnabled(false);

        JOptionPane.showMessageDialog(rootPane, "Señor usuario, si desea operar con el automata finito (AF) \ntiene que llenar la tabla con las respectivas transiciones\ny luego hacer clic en el boton 'Operar'");
    }//GEN-LAST:event_btnIngresoActionPerformed
    /**
     * Este botón permite convertir un autómata no determinístico en
     * determinístico.
     *
     * @param evt
     */
    private void btnConversorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConversorActionPerformed
        // TODO add your handling code here:

        if (seleccion == 1) {
            if (automata1.getEstadosIniciales().length == 1) {
                ca1.convertirEnDeterministico();
                ca1.estadosAceptacion();
            } else {
                ca1.unionAutomata(true);
               
            }
        } else if (seleccion == 2) {
            if (automata2.getEstadosIniciales().length == 1) {
                ca2.convertirEnDeterministico();
                
            } else {
                ca2.unionAutomata(true);
                
            }
        }

        llenarTabla(tablaSeleccionada());
        btnSimplificar.setVisible(true);
        btnVerificarHilera.setVisible(true);
    }//GEN-LAST:event_btnConversorActionPerformed
    /**
     * Este botón guardar el autómata que se ingresó y además verifica si el
     * autómata es determinístico o no determinístico
     *
     * @param evt
     */
    private void btnOperarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOperarActionPerformed
        try {
            if (seleccion == 1) {
                ca1 = new ControladorAutomata(automata1, dtm);
                automata1.setTransiciones(ca1.guardarAutomata());
                
                ArrayList<String> estAcp = new ArrayList<>();
                String indicador;
                for (int i = 0; i < dtm.getRowCount(); i++) {
                    indicador = (String) dtm.getValueAt(i, automata1.getSimbolos().length + 1);
                    if (indicador.compareTo("1") == 0) {
                        estAcp.add((String) dtm.getValueAt(i, 0));
                    }
                }
                String[] estadosAcp = new String[estAcp.size()];
                for (int i = 0; i < estadosAcp.length; i++) {
                    estadosAcp[i] = estAcp.get(i);
                }
                automata1.setEstadosAceptacion(estadosAcp);
                ca1.estadosAceptacion();
                ca1.estadosIniciales();
                if (ca1.esDeterministico()) {
                    JOptionPane.showMessageDialog(rootPane, "El autómata es deterministico");
                    btnSimplificar.setVisible(true);
                    btnVerificarHilera.setVisible(true);
                } else {
                 
                    if (automata1.getEstadosIniciales().length == 1) {
                        JOptionPane.showMessageDialog(rootPane, "El autómata es no deterministico");
                        btnConversor.setVisible(true);
                    } else {
                        String[] opciones = {"Unión", "Intersección"};
                        int opcion = JOptionPane.showOptionDialog(
                                null //componente
                                ,
                                 "El automata cuenta con más de 1 estado inicial\n¿Que desea hacer?" // Mensaje
                                ,
                                 "El autómata es no deterministico"// Titulo en la barra del cuadro
                                ,
                                 JOptionPane.DEFAULT_OPTION // Tipo de opciones
                                ,
                                 JOptionPane.INFORMATION_MESSAGE // Tipo de mensaje (icono)
                                ,
                                 null // Icono (ninguno)
                                ,
                                 opciones // Opciones personalizadas
                                ,
                                 null // Opcion por defecto
                        );
                        if (opcion == 0) {
                            ca1.unionAutomata(true);
                            llenarTabla(tablaEstados);
                        } else {
                            ca1.unionAutomata(false);
                            llenarTabla(tablaEstados);
                        }
                    }
                    
                }
                btnGuardarArchivo.setEnabled(true);
                btnPDF.setEnabled(true);
                
            } 
                else if (seleccion == 2) {
                ca2 = new ControladorAutomata(automata2, dtm);
                automata2.setTransiciones(ca2.guardarAutomata());
                ArrayList<String> estAcp = new ArrayList<>();
                String indicador;
                for (int i = 0; i < dtm.getRowCount(); i++) {
                    indicador = (String) dtm.getValueAt(i, automata2.getSimbolos().length + 1);
                    if (indicador.compareTo("1") == 0) {
                        estAcp.add((String) dtm.getValueAt(i, 0));
                    }
                }
                String[] estadosAcp = new String[estAcp.size()];
                for (int i = 0; i < estadosAcp.length; i++) {
                    estadosAcp[i] = estAcp.get(i);
                }
                automata2.setEstadosAceptacion(estadosAcp);
                ca2.estadosAceptacion();
                ca2.estadosIniciales();
                if (ca2.esDeterministico()) {
                    JOptionPane.showMessageDialog(rootPane, "El autómata es deterministico");
                    btnSimplificar.setVisible(true);
                    btnVerificarHilera.setVisible(true);
                } else {
                    String[] opciones = {"Unión", "Intersección"};
                    int opcion = JOptionPane.showOptionDialog(
                            null //componente
                            ,
                             "El automata cuenta con más de 1 estado inicial\n¿Que desea hacer?" // Mensaje
                            ,
                             "El autómata es no deterministico"// Titulo en la barra del cuadro
                            ,
                             JOptionPane.DEFAULT_OPTION // Tipo de opciones
                            ,
                             JOptionPane.INFORMATION_MESSAGE // Tipo de mensaje (icono)
                            ,
                             null // Icono (ninguno)
                            ,
                             opciones // Opciones personalizadas
                            ,
                             null // Opcion por defecto
                    );
                    if (opcion == 0) {
                        ca2.unionAutomata(true);
                        llenarTabla(tablaNuevoAutomata);
                    } else {
                        ca2.unionAutomata(false);
                        llenarTabla(tablaNuevoAutomata);
                    }
                }
                btnGuardarArchivo.setEnabled(true);
                btnPDF.setEnabled(true);
                btnInterseccion.setVisible(true);
                btnInterseccion.setEnabled(true);
                btnUnion2Automatas.setVisible(true);
                btnUnion2Automatas.setEnabled(true);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Ingreso inválido");
        }


    }//GEN-LAST:event_btnOperarActionPerformed
    /**
     * Este botón permite abrir un archivo con el autómata de algún lugar de
     * nuestro ordenador
     *
     * @param evt
     */
    private void btnArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnArchivoActionPerformed
        String[] estadotes;
        String[] ouch = null;
        if (abrirArchivo.showDialog(null, "ABRIR ARCHIVO") == JFileChooser.APPROVE_OPTION) {
            archivo = abrirArchivo.getSelectedFile();
            if (archivo.canRead()) {
                if (archivo.getName().endsWith("txt")) {
                    try {
                        btnOperar.setEnabled(true);
                        btnAddEstado.setEnabled(true);
                        btnRestaurar.setEnabled(true);
                        txtNuevoEstado.setEnabled(true);

                        btnIngreso.setEnabled(false);
                        txtEstados.setEnabled(false);
                        txtSimbolos.setEnabled(false);

                        File fichero_entrada;
                        fichero_entrada = new File(archivo.getAbsolutePath());
                        Scanner scaneoPapu = new Scanner(fichero_entrada);
                        Vector<String> datosDeEntrada = new Vector<String>();
                        String[] slapChop;
                        String symbols = "";
                        int contador = 0;
                        while (scaneoPapu.hasNext()) {
                            String lineaExtraida = scaneoPapu.nextLine();
                            switch (contador) {
                                case 0:
                                    slapChop = lineaExtraida.split(":");
                                    lineaExtraida = slapChop[1];
                                    symbols = lineaExtraida;
                                    txtSimbolos.setText(lineaExtraida);
                                    break;
                                case 1:
                                    slapChop = lineaExtraida.split(":");
                                    lineaExtraida = slapChop[1];
                                    txtEstados.setText(lineaExtraida);
                                    ouch = symbols.split(",");
                                    slapChop = new String[ouch.length + 3];
                                    slapChop[0] = "Estados";
                                    for (int i = 0; i < ouch.length; i++) {
                                        slapChop[i + 1] = ouch[i];
                                    }
                                    slapChop[slapChop.length - 2] = "E.A.";
                                    slapChop[slapChop.length - 1] = "E.I.";
                                    dtm = new DefaultTableModel(slapChop, 0);
                                    break;
                                default:
                                    slapChop = lineaExtraida.split(":");
                                    lineaExtraida = slapChop[0] + "," + slapChop[1];
                                    slapChop = lineaExtraida.split(",");
                                    dtm.addRow(slapChop);
                                    tablaSeleccionada().setModel(dtm);
                                    break;
                            }
                            contador++;
                            datosDeEntrada.add(lineaExtraida);
                        }
                        estadotes = txtEstados.getText().split(",");
                        if (seleccion == 1) {
                            automata1.setEstados(estadotes);
                            automata1.setSimbolos(ouch);
                            ca1 = new ControladorAutomata(automata1, dtm);
                        } else if (seleccion == 2) {
                            automata2.setEstados(estadotes);
                            automata2.setSimbolos(ouch);
                            ca2 = new ControladorAutomata(automata2, dtm);
                        }
                        JOptionPane.showMessageDialog(rootPane, "Señor usuario, si desea operar con el automata finito (AF) \ntiene que llenar la tabla con las respectivas transiciones\ny luego hacer clic en el boton 'Operar'");
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(rootPane, "Se ha producido un error " + e + ". Revise datos ingresados y operados.");
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "Seleccione un archivo de texto.");
            }
        }
    }//GEN-LAST:event_btnArchivoActionPerformed
    /**
     * Este botón simplifica el autómata ingresado
     *
     * @param evt
     */
    private void btnSimplificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSimplificarActionPerformed
        // TODO add your handling code here:
        try{
        btnVerificarHilera.setVisible(true);
        if (seleccion == 1) {
            ca1.simplificar();
        } else if (seleccion == 2) {
            ca2.simplificar();
        }
        llenarTabla(tablaSeleccionada());
        }catch(Exception e) {
                        JOptionPane.showMessageDialog(rootPane, " No es posible simplificar");
                    }
                

    }//GEN-LAST:event_btnSimplificarActionPerformed
    /**
     * Este botón permite verificar si una secuencia es reconocida por el
     * autómata,y mostrar si es aceptada o rechazada
     *
     * @param evt
     */
    private void btnVerificarHileraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerificarHileraActionPerformed
        btnEvaluar.setEnabled(true);
        textVeri.setEnabled(true);
        secuenciaIngresada.setEnabled(true);
        mostrarDecision.setEnabled(true);
    }//GEN-LAST:event_btnVerificarHileraActionPerformed
    /**
     * Este botón permite agregar un nuevo estado en el autómata que se está
     * trabajando
     *
     * @param evt
     */
    private void btnAddEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddEstadoActionPerformed
        // TODO add your handling code here:
        String[] otroMx = new String[1];
        otroMx[0] = txtNuevoEstado.getText().trim();
        txtNuevoEstado.setText("");
        dtm.addRow(otroMx);
        JOptionPane.showMessageDialog(rootPane, "Señor usuario, si desea operar con el automata finito (AF) \ntiene que llenar la tabla con las respectivas transiciones\ny luego hacer clic en el boton 'Operar'");
    }//GEN-LAST:event_btnAddEstadoActionPerformed
    /**
     * Este botón permite ingresar un nuevo autómata
     *
     * @param evt
     */
    private void btnRestaurarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRestaurarActionPerformed
        // TODO add your handling code here:
        btnIngreso.setEnabled(true);
        txtEstados.setEnabled(true);
        txtEstados.setText("");
        txtSimbolos.setEnabled(true);
        txtSimbolos.setText("");
        btnArchivo.setEnabled(true);

        mostrarDecision.setText("");
        btnPDF.setEnabled(false);
        btnGuardarArchivo.setEnabled(false);
        btnEvaluar.setEnabled(false);
        textVeri.setEnabled(false);
        secuenciaIngresada.setText("");
        secuenciaIngresada.setEnabled(false);
        mostrarDecision.setEnabled(false);
        btnConversor.setVisible(false);
        btnSimplificar.setVisible(false);
        btnVerificarHilera.setVisible(false);
        btnOperar.setEnabled(false);
        txtNuevoEstado.setEnabled(false);
        btnRestaurar.setEnabled(false);
        btnAddEstado.setEnabled(false);
        DefaultTableModel empty = new DefaultTableModel();
        int choose = JOptionPane.showConfirmDialog(rootPane, "¿Desea restaurar ambos automatas?\nSi escoge la opción 'No' solo será restaurado\nel automata que este seleccionado.");
        if (choose == JOptionPane.YES_OPTION) {
            tablaEstados.setModel(empty);
            tablaNuevoAutomata.setModel(empty);
            auto2 = false;
        } else {
            tablaSeleccionada().setModel(empty);
            if(seleccion == 1){
                auto2 = false;
            }
        }
    }//GEN-LAST:event_btnRestaurarActionPerformed
    /**
     * Este botón permite verificar la hilera ingresada y decidir si es aceptada
     * o rechaza por el autómata
     *
     * @param evt
     */
    private void btnEvaluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEvaluarActionPerformed
        // TODO add your handling code here:
        try {
            mostrarDecision.setText("");
            String hilera = secuenciaIngresada.getText();

            String[] symb = automata1.getSimbolos();
            ArrayList<String> arrSymb = new ArrayList<>();
            for (int i = 0; i < symb.length; i++) {
                arrSymb.add(symb[i]);
            }
            ArrayList<String> verf = new ArrayList<>();
            for (int i = 0; i < hilera.length(); i++) {
                verf.add(String.valueOf(hilera.charAt(i)));
            }
            if (!arrSymb.containsAll(verf)) {
                mostrarDecision.setText("¡Ha ingresado caracteres inválidos!");
            } else if (ca1.verificarHilera(hilera)) {
                mostrarDecision.setText("La secuencia es aceptada");
            } else {
                mostrarDecision.setText("La secuencia es rechazada");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Hilera inválida");
        }


    }//GEN-LAST:event_btnEvaluarActionPerformed
/**
 * Este botón permite guardar el autómata en pantalla en un archivo txt
 * @param evt 
 */
    private void btnGuardarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarArchivoActionPerformed
        // TODO add your handling code here:
        Archivo arch = new Archivo();
        arch.GuardarEnTXT(automataSeleccionado(),dtm);
    }//GEN-LAST:event_btnGuardarArchivoActionPerformed

    private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseClicked
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(rootPane, "Para ingresar los símbolos, debe ingresarlos separados por comas (,)");
    }//GEN-LAST:event_jLabel5MouseClicked

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(rootPane, "Para ingresar los estados, debe ingresarlos separados por comas (,)");
    }//GEN-LAST:event_jLabel1MouseClicked
/**
 * Permite trabajar sobre el autómata 2
 * @param evt 
 */
    private void rdbtnA2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbtnA2ActionPerformed
        // TODO add your handling code here:
        seleccion = 2;
        auto2 = true;
        btnIngreso.setEnabled(true);
        txtEstados.setEnabled(true);
        txtEstados.setText("");
        txtSimbolos.setEnabled(false);
        btnArchivo.setEnabled(true);

        btnGuardarArchivo.setEnabled(false);
        btnPDF.setEnabled(false);
        btnEvaluar.setEnabled(false);
        textVeri.setEnabled(false);
        secuenciaIngresada.setText("");
        secuenciaIngresada.setEnabled(false);
        mostrarDecision.setEnabled(false);
        btnConversor.setVisible(false);
        btnSimplificar.setVisible(false);
        btnVerificarHilera.setVisible(false);
        btnOperar.setEnabled(false);
        txtNuevoEstado.setEnabled(false);
        btnRestaurar.setEnabled(false);
        btnAddEstado.setEnabled(false);
    }//GEN-LAST:event_rdbtnA2ActionPerformed
/**
 * Botón que permite hacer la unión de dos autómatas
 * @param evt 
 */
    private void btnUnion2AutomatasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUnion2AutomatasActionPerformed
        // TODO add your handling code here:
        seleccion = 1;
        DobleAutomata doble = new DobleAutomata(ca1.getAf(), ca2.getAf());
        doble.contruirAutomata();
        caDoble = new ControladorAutomata(doble.getAf(), dtm);
        caDoble.unionAutomata(true);
        automata1 = caDoble.getAf();
        llenarTabla(tablaEstados);
        DefaultTableModel empty = new DefaultTableModel();
        tablaNuevoAutomata.setModel(empty);
    }//GEN-LAST:event_btnUnion2AutomatasActionPerformed
/**
 * Botón que permite guarda el autómata en pantalla en un archivo PDF
 * @param evt 
 */
    private void btnPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPDFActionPerformed
        // TODO add your handling code here:
        Archivo arch = new Archivo();
        arch.GuardarEnPDF(automataSeleccionado(),dtm);
    }//GEN-LAST:event_btnPDFActionPerformed
/**
 * Permite trabajar sobre el autómata 1
 * @param evt 
 */
    private void rdbtnA1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbtnA1ActionPerformed
        // TODO add your handling code here:
        seleccion = 1;
    }//GEN-LAST:event_rdbtnA1ActionPerformed
/**
 * Botón que permite hacer la intersección entre dos autómatas
 * @param evt 
 */
    private void btnInterseccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInterseccionActionPerformed
        // TODO add your handling code here:
        seleccion=1;
        DobleAutomata doble = new DobleAutomata(ca1.getAf(), ca2.getAf());
        doble.contruirAutomata();
        caDoble = new ControladorAutomata(doble.getAf(), dtm);
        caDoble.unionAutomata(false);
        automata1 = caDoble.getAf();
        llenarTabla(tablaEstados);
        DefaultTableModel empty = new DefaultTableModel();
        tablaNuevoAutomata.setModel(empty);
    }//GEN-LAST:event_btnInterseccionActionPerformed
    /**
     * Este método permite saber si un estado es de aceptación para llenar la
     * tabla cuando se convierte de no determinístico a determinístico
     *
     * @param estado String con el estado que se quiere verificar.
     * @return un booleano en true si el estado es de aceptación, o false de lo
     * contrario.
     */
    public boolean definirEstadoAceptacion(String estado) {
        boolean b = false;
        for (int i = 0; i < automataSeleccionado().getEstadosAceptacion().length; i++) {
            if (automataSeleccionado().getEstadosAceptacion()[i].equals(estado)) {
                b = true;
                break;
            }
        }
        return b;
    }

    /**
     * Este método permite mostrar el autómata en un tabla para que el usuario
     * pueda interactuar dinámicamente con ella.
     *
     * @param tabla la tabla que se va a llenar.
     */
    public void llenarTabla(JTable tabla) {
        String[] simbolosEntrando = automataSeleccionado().getSimbolos();
        String[] estados = automataSeleccionado().getEstados();
        ArrayList<ArrayList> automata = automataSeleccionado().getTransiciones();
        String[] simbolosArr = new String[simbolosEntrando.length + 3];
        simbolosArr[0] = "Estados";
        for (int sym = 1; sym < simbolosArr.length - 2; sym++) {
            simbolosArr[sym] = simbolosEntrando[sym - 1];
        }
        simbolosArr[simbolosArr.length - 2] = "E.A.";
        simbolosArr[simbolosArr.length - 1] = "E.I.";
        dtm = new DefaultTableModel(simbolosArr, 0);

        for (int i = 0; i < estados.length; i++) {
            String[] fila = new String[simbolosArr.length];
            fila[0] = estados[i];
            ArrayList<String> transiciones = automata.get(i);
            for (int j = 0; j < transiciones.size(); j++) {
                fila[j + 1] = transiciones.get(j);
            }
            if (definirEstadoAceptacion(estados[i])) {
                fila[simbolosArr.length - 2] = "1";
            } else {
                fila[simbolosArr.length - 2] = "0";
            }
            if(i == 0){
                fila[simbolosArr.length - 1] = "#";
            }
            dtm.addRow(fila);
        }
        tabla.setModel(dtm);
    }

    /**
     * Este método permite saber sobre cual tabla vamos a trabajar
     * @return  la tabla que se va a modificar
     */
    public JTable tablaSeleccionada() {
        if (rdbtnA1.isSelected()) {
            seleccion = 1;
            return tablaEstados;
        }
        seleccion = 2;
        return tablaNuevoAutomata;
    }
/**
 * Este método permite saber sobre cuál autómata vamos a trabajar
 * @return el autómata que se va a modificar o evaluar.
 */
    public AutomataF automataSeleccionado() {
        if (seleccion == 1) {
            return automata1;
        }
        return automata2;
    }

    public ControladorAutomata controlSeleccionado() {
        if (seleccion == 1) {
            return ca1;
        }
        return ca2;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PantallaIngreso.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PantallaIngreso.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PantallaIngreso.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PantallaIngreso.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PantallaIngreso().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Fondo;
    private javax.swing.JButton btnAddEstado;
    private javax.swing.JButton btnArchivo;
    private javax.swing.JButton btnConversor;
    private javax.swing.JButton btnEvaluar;
    private javax.swing.JButton btnGuardarArchivo;
    private javax.swing.JButton btnIngreso;
    private javax.swing.JButton btnInterseccion;
    private javax.swing.JButton btnOperar;
    private javax.swing.JButton btnPDF;
    private javax.swing.JButton btnRestaurar;
    private javax.swing.JButton btnSimplificar;
    private javax.swing.JButton btnUnion2Automatas;
    private javax.swing.JButton btnVerificarHilera;
    private javax.swing.ButtonGroup grupoAutomatas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTextField mostrarDecision;
    private javax.swing.JRadioButton rdbtnA1;
    private javax.swing.JRadioButton rdbtnA2;
    private javax.swing.JScrollPane scroll2;
    private javax.swing.JTextField secuenciaIngresada;
    private javax.swing.JTable tablaEstados;
    private javax.swing.JTable tablaNuevoAutomata;
    private javax.swing.JLabel textVeri;
    private javax.swing.JTextField txtEstados;
    private javax.swing.JTextField txtNuevoEstado;
    private javax.swing.JTextField txtSimbolos;
    // End of variables declaration//GEN-END:variables
}
